## Defining Route Parameters

Route parameters are named segments in a URL that act as placeholders for dynamic values. They are defined in the route path and can be accessed within the route handler. For example, in the route `/events/:id`, `:id` is a route parameter that can hold the ID of a specific event.

### Example

```javascript
// Define a route with a parameter
app.get('/events/:id', (req, res) => {
    const eventId = req.params.id;
    // Fetch and return the event with the given ID
    res.send(`Event ID: ${eventId}`);
});
```

In this example, when a request is made to `/events/123`, the `id` parameter will be `123`, and the server will respond with `Event ID: 123`.

**Url example:**

```
http://localhost:3000/events/123
```

When you navigate to this URL, the server will process the request and respond with `Event ID: 123`.


### Steps to Fetch a Specific Event by ID

1. **Define the Route**: Create a route that includes a parameter for the event ID.
2. **Access the Parameter**: Use `req.params` to access the route parameter within the route handler.
3. **Fetch the Event**: Use the event ID to fetch the specific event from your data source.
4. **Send the Response**: Return the fetched event in the response.

### Example

```javascript
// Define a route with a parameter
app.get('/events/:id', (req: Request, res: Response) => {
    const eventId = req.params.id;
    // Fetch the event from the database (mocked here)
    const event = getEventById(eventId); // Assume this function fetches the event
    if (event) {
        res.json(event);
        return;
    } else {
        res.status(404).send('Event not found');
    }
});

// Mock function to simulate fetching an event by ID
function getEventById(id) {
    const events = [
        { id: '123', name: 'Event 123' },
        { id: '456', name: 'Event 456' }
    ];
    return events.find(event => event.id === id);
}
```

In this example, when a request is made to `/events/123`, the server will fetch the event with ID `123` and return its details in the response. If the event is not found, it will respond with a 404 status code and an error message.



### Handling Multiple Route Parameters

You can define multiple route parameters in a single route by separating them with slashes. Each parameter can be accessed individually within the route handler.

### Example

```javascript
// Define a route with multiple parameters
app.get('/events/:eventId/attendees/:attendeeId', (req, res) => {
    const { eventId, attendeeId } = req.params;
    // Fetch and return the event and attendee details
    res.send(`Event ID: ${eventId}, Attendee ID: ${attendeeId}`);
});
```

In this example, when a request is made to `/events/123/attendees/456`, the `eventId` parameter will be `123` and the `attendeeId` parameter will be `456`. The server will respond with `Event ID: 123, Attendee ID: 456`.

**Url example:**

```
http://localhost:3000/events/123/attendees/456
```

When you navigate to this URL, the server will process the request and respond with `Event ID: 123, Attendee ID: 456`.

### Steps to Handle Multiple Parameters

1. **Define the Route**: Create a route that includes multiple parameters.
2. **Access the Parameters**: Use `req.params` to access the route parameters within the route handler.
3. **Fetch the Data**: Use the parameters to fetch the specific data from your data source.
4. **Send the Response**: Return the fetched data in the response.

### Example

```javascript
// Define a route with multiple parameters
app.get('/events/:eventId/attendees/:attendeeId', (req: Request, res: Response) => {
    const { eventId, attendeeId } = req.params;
    // Fetch the event and attendee from the database (mocked here)
    const event = getEventById(eventId); // Assume this function fetches the event
    const attendee = getAttendeeById(attendeeId); // Assume this function fetches the attendee
    if (event && attendee) {
        res.json({ event, attendee });
        return;
    } else {
        res.status(404).send('Event or Attendee not found');
    }
});

// Mock function to simulate fetching an event by ID
function getEventById(id) {
    const events = [
        { id: '123', name: 'Event 123' },
        { id: '456', name: 'Event 456' }
    ];
    return events.find(event => event.id === id);
}

// Mock function to simulate fetching an attendee by ID
function getAttendeeById(id) {
    const attendees = [
        { id: '456', name: 'Attendee 456' },
        { id: '789', name: 'Attendee 789' }
    ];
    return attendees.find(attendee => attendee.id === id);
}
```

In this example, when a request is made to `/events/123/attendees/456`, the server will fetch the event with ID `123` and the attendee with ID `456`, then return their details in the response. If either the event or the attendee is not found, it will respond with a 404 status code and an error message.
